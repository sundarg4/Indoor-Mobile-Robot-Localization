from bstem.platform import AdCord
import threading
from serial_read import *
import angle_calculate_obstacle as aco
from motor import *

g=threading.Thread(target=serial_read) #serial read thread
g.daemon=True
g.start()

h=threading.Thread(target=aco.angle_calculate) #to dynamicaly calculate angle during obstafcle alone
h.daemon=True
h.start()

i=threading.Thread(target=erun) #erun thread to get user input
i.daemon=True
i.start()

f=open('(g+e)readings.txt','w',0)
angr=0
rc='w'
scalar=0.3
tscalar=0.5
newscalar=0.1
ticks_to_mm = 0.349
robot_width = 18
def encoder_angle(l,r):
	stlne = l-r
	if(stlne == 0):
		return 0
	elif(stlne < 0):
		alpha=-((stlne* ticks_to_mm)/robot_width)
		return (alpha)
	else:
		alpha=-((stlne* ticks_to_mm)/robot_width)
		return (alpha)
def run():
	global angr
	global rc
	while True:
		rc = qr.get()
		#print("Leftwheel:",-adr.encoder[2].position*3.38)#left motor
		#print("Rightwheel:",adr.encoder[0].position*3.38)#right motor
		#f.write(str(-adr.encoder[2].position*3.38)+" "+str(adr.encoder[0].position*3.38)+"\n")
		if rc =='w':#forward
			#print(rc)
			aco.adr.motor[0].speed=scalar #right motor 
			aco.adr.motor[2].speed=-scalar #left motor
			l = -(aco.adr.encoder[2].position*3.38)
			r = (aco.adr.encoder[0].position*3.38)
			angr = angr + encoder_angle(l,r)
			aco.ang = angr
			f.write('w'+","+str(angr)+","+str(l)+" "+str(r)+"\n")
		elif rc=='a':#left
			aco.adr.motor[0].speed=tscalar
			aco.adr.motor[2].speed=-newscalar
			#z,gZ=g_angler('z',adr.gyroscope.z)

		elif rc=='d':#right
			aco.adr.motor[0].speed=newscalar
			aco.adr.motor[2].speed=-tscalar
			#z,gZ=g_angler('z',adr.gyroscope.z)
			
		elif rc=='s':#back
			aco.adr.motor[0].speed=-scalar
			aco.adr.motor[2].speed=scalar
			#aco.ang=0
			l = -(aco.adr.encoder[2].position*3.38)
			r = (aco.adr.encoder[0].position*3.38)
			angr = angr + encoder_angle(l,r)
			aco.ang = angr
			f.write("s"+","+str(angr)+","+str(l)+" "+str(r)+"\n")
		elif rc=='x':#stop
			aco.adr.motor[0].speed=0
			aco.adr.motor[2].speed=0
	f.close()

if __name__ == "__main__":
    run()
